<resources>
    <string name="app_name" translatable="false">Notepad 2</string>
    <string name="is_folder">Folder</string>
    <string name="is_executable">Script</string>
    <string name="is_file">Text file</string>

    <string name="new_file_text" translatable="false">new file</string>
    <string name="new_folder_text" translatable="false">new folder</string>
    <string name="new_executable_text" translatable="false">new script</string>

    <string name="content">Content</string>

    <string name="empty_folder_view">Folder %s is empty!</string>

    <string name="param_ask_delete">Ask before delete</string>
    <string name="ask_delete">Delete %s?</string>

    <string name="action_delete">Delete</string>
    <string name="btn_menu_help">\'Help\' folder</string>

    <string name="action_save">Save</string>
    <string name="action_rollback">Rollback</string>
    <string name="action_rollforward">Rollforward</string>

    <string name="create_item_text">Create item</string>
    <string name="action_create">Create</string>
    <string name="edit_item_text">Edit item</string>
    <string name="action_apply">Apply</string>



    <string name="error_bad_path">Non existent path \'%s\'</string>
    <string name="error_file2folder">Could not mkdir, file with the same name exists: \'%s\'</string>
    <string name="error_folder2file">Could not write to folder: \'%s\'</string>
    <string name="error_read_existence">Could not read: file \'%s\' does not exist</string>
    <string name="error_move_dest">move dest \'%s\' is in src \'%s\'</string>
    <string name="error_move_file">Could not move to file \'%s\'</string>

    <string name="help_text" translatable="false">"{\"n\": \"Help\", \"t\": 0, \"f\": [{\"n\": \"1. Basic\", \"t\": 1, \"c\": \"FOLDER, TEXT, SCRIPT - entries\\n\\n\\n\\nFOLDER - contains other entries\\n\\nTEXT - text file, you can see beginning of the text under the name of the file.\\nClick on it to edit text file.\\n\\nSCRIPT - the same as text file, but click on it will execute script, which is written in file.\\n\\nfiles - TEXT or SCRIPT.\\n\\nTo create entry click \'\\u2295\', choose type and write name for the entry, or click \'paste\'.\\n\\nClick button \'Settings\' or do long click on entry. There you can rename it, change type between SCRIPT and TEXT, delete or cut.\\n\\nIf \'ask before delete\' in menu is selected, app will ask you to accept. If not selected - the entry will be deleted immediately.\\n\\n\'Help\' dir - if \'/Help\' does not exist, creates it. Then shows \'/Help\'\"}, {\"n\": \"2. Script\", \"t\": 1, \"c\": \"Script - python 3 script.\\nWrite some code on python 3 in text, then change type of the text to Script and tap it.\\n\\n\\nOutput.\\nOutput of the script is going to \'out.txt\' in the same folder, result of error stream is going to \'err.txt\'.\\n\\n\\nLibraries.\\nNow python has no external libraries, just standard python 3 library.\\n\'sys\', \'json\' and \'traceback\' are already imported.\\n\\n\\nAPI.\\nNotepad api is imported as \'api\', it has the following methods:\\n\\ntoast(str) - displays toast with text \'str\'\\ntoast_l(str) - long duration toast\\n\\ntouch(path) - if file does not exist, makes new TEXT\\n\\nread(path):str - read text from file, throws runtime error if there are no file.\\n\\nwrite(path, str) - write text to file, makes new text if need, throws runtime error if path is a path of folder.\\n\\nscript(path, bool) - marks text as script or script as text, makes new file if need, throws runtime error if path is a path of folder.\\n\\nmkdir(path) - makes new folder, throws runtime error if path is a path of file.\\n\\ndelete(path) - deletes entry and if entry is folder, deletes all children.\\n\\npath():str - returns absolute path of current script.\\n\\nscript_name():str - returns name of script file (relative path).\\n\\nget_name(path):str - returns name of last entry of the path.\\n\\nrename(path, new_name):str - renames entry\\n\\npath_concat(str, str):str - returns right concatenation of two paths.\\n\\nexists(path):bool - returns True if path exists else False.\\n\\nis_folder(path):bool - returns True if path is path of folder, else False.\\n\\nis_script(path):bool - returns True, if path is path of script, else False.\\n\\nget_type(path):ElementType - returns example of the enum, can be None, ElementType.TEXT, ElementType.FOLDER, ElementType.SCRIPT.\\n\\nlist_files(path):java.util.ArrayList - returns list of files of the folder, list.size() to get length, list.get(i) to get i element. Elements are of type DatabaseElement, which have following fields:\\nid:int - unique id in database.\\nname:str,\\ntype:ElementType,\\ncontent:str - preview - first 50 characters of content.\\n\\nthe element has method toString():str.\\n\\nmove(path1, path2) - moves entry called path1, to folder called path2, does not allow to move folder into itself.\\n\\n\\nAPI_FILES.\\nextra functions, realized on python. Already imported class \'api_files\' has following methods:\\n\\nto_py(path):dict - returns dict of following values:\\n\'n\' - name of entry\\n\'t\' - (int) type\\nif type is 0 - ElementType.FOLDER.ordinal():\\n \'f\' - list of dicts - entries\\nelse:\\n \'c\' - content of file\\n\\nfrom_py(path, dict) - makes new entry from dict in folder called path.\\n\\nto_json(path):str - makes string from to_py(path)\\n\\nfrom_json(path, str) - invokes from_py(path, dict)\\n\\n\\nPATH.\\nabsolute path starts on root folder called \'/\' - like in title of window.\\n\\nrelative path is path, which starts on folder that contains current executable file.\\n\\n\\nOTHER.\\nYou can import every class from android standard library, if you need example of Context, it is available as \'api.activity\' of type MainActivity\"}, {\"n\": \"3. Code examples\", \"t\": 0, \"f\": [{\"n\": \"1. Hello world\", \"t\": 0, \"f\": [{\"n\": \"1. print\", \"t\": 2, \"c\": \"print(\'Hello world\')\"}, {\"n\": \"2. toast\", \"t\": 2, \"c\": \"api.toast(\'Hello world\')\"}, {\"n\": \"3. input\", \"t\": 2, \"c\": \"print(input())\"}]}, {\"n\": \"2. Read-write\", \"t\": 0, \"f\": [{\"n\": \"1. Simple\", \"t\": 0, \"f\": [{\"n\": \"1. Write\", \"t\": 2, \"c\": \"api.write(\'data/text\', \'Hello world\')\"}, {\"n\": \"2. Read\", \"t\": 2, \"c\": \"api.toast(api.read(\'data/text\'))\"}, {\"n\": \"3. Delete\", \"t\": 2, \"c\": \"api.delete(\'data\')\"}]}, {\"n\": \"2. Incrementor\", \"t\": 0, \"f\": [{\"n\": \".num\", \"t\": 1, \"c\": \"0\"}, {\"n\": \"appender\", \"t\": 2, \"c\": \"#append one to file num\\n\\nfile = \'.num\'\\n\\ni = 1\\nif api.exists(file):\\n    s = api.read(file)\\n    i = int(s) + 1\\n\\napi.write(file, str(i))\"}, {\"n\": \"subtractor\", \"t\": 2, \"c\": \"#subtract one from file num\\n\\nfile = \'.num\'\\n\\ni = -1\\nif api.exists(file):\\n    s = api.read(file)\\n    i = int(s) - 1\\n\\napi.write(file, str(i))\"}]}, {\"n\": \"3. Counter\", \"t\": 2, \"c\": \"#counts from [0 to 5)\\nimport time\\n\\nfor i in range(5):\\n    api.write(\'time\', str(i))\\n    time.sleep(1)\\n\\napi.delete(\'time\')\"}]}, {\"n\": \"3. Move\", \"t\": 0, \"f\": [{\"n\": \"1. Example\", \"t\": 0, \"f\": [{\"n\": \"1. Make data\", \"t\": 2, \"c\": \"api.mkdir(\'main\')\\napi.mkdir(\'fold\')\\napi.touch(\'file\')\"}, {\"n\": \"2. Move file\", \"t\": 2, \"c\": \"api.move(\'file\', \'fold\')\"}, {\"n\": \"3. Move fold\", \"t\": 2, \"c\": \"api.move(\'fold\', \'main\')\"}, {\"n\": \"4. Move back\", \"t\": 2, \"c\": \"api.move(\'main/fold/file\', \'.\')\\napi.move(\'main/fold\', \'.\')\"}, {\"n\": \"5. Clear data\", \"t\": 2, \"c\": \"api.delete(\'main\')\\napi.delete(\'fold\')\\napi.delete(\'file\')\"}]}, {\"n\": \"2. Moving with replace\", \"t\": 0, \"f\": [{\"n\": \"1. make\", \"t\": 2, \"c\": \"api.write(\'dir/file\', \'Hello\')\"}, {\"n\": \"2. move\", \"t\": 2, \"c\": \"api.move(\'dir/file\', \'.\')\\napi.delete(\'dir\')\"}, {\"n\": \"3. delete\", \"t\": 2, \"c\": \"api.delete(\'file\')\"}]}]}, {\"n\": \"4. Rename\", \"t\": 0, \"f\": [{\"n\": \"1. Rename of entry\", \"t\": 0, \"f\": [{\"n\": \"1. make\", \"t\": 2, \"c\": \"api.touch(\'file\') # 2 lines script\\napi.mkdir(\'fold\')\"}, {\"n\": \"2. rename\", \"t\": 2, \"c\": \"api.rename(\'file\', \'text\')# also 2 lines\\napi.rename(\'fold\', \'dir\')\"}, {\"n\": \"3. delete\", \"t\": 2, \"c\": \"api.delete(\'text\')\\napi.delete(\'dir\')\"}]}, {\"n\": \"2. Rename of containing folder\", \"t\": 0, \"f\": [{\"n\": \"renamable\", \"t\": 0, \"f\": [{\"n\": \"1. rename\", \"t\": 2, \"c\": \"api.rename(\'.\', \'dir\')\"}, {\"n\": \"2. back\", \"t\": 2, \"c\": \"api.rename(\'.\', \'renamable\')\"}]}]}]}, {\"n\": \"5. Help statistics\", \"t\": 0, \"f\": [{\"n\": \"1. make_statistics\", \"t\": 2, \"c\": \"api.touch(\'out.txt\')\\ns = api_files.to_py(\'/Help\')\\ndat = [0, 0]\\n\\ndef make(d, dat):\\n    if d[\'t\'] == ElementType.FOLDER.ordinal():\\n        dat[1] += 1\\n        for el in d[\'f\']:\\n            make(el, dat)\\n    else:\\n        dat[0] += 1\\n\\n\\nmake(s, dat)\\n\\nprint(f\'files: {dat[0]}, folders: {dat[1]}\')\\n\"}, {\"n\": \"2. to json\", \"t\": 2, \"c\": \"s = api_files.to_json(\'../4. Rename\')\\napi.write(\'rename.json\', s)\"}, {\"n\": \"3. from json\", \"t\": 2, \"c\": \"api_files.from_json(\'.\', api.read(\'rename.json\'))\"}, {\"n\": \"4. Delete\", \"t\": 2, \"c\": \"api.delete(\'4. Rename\')\\napi.delete(\'out.txt\')\\napi.delete(\'rename.json\')\"}]}, {\"n\": \"6. Android notifications\", \"t\": 0, \"f\": [{\"n\": \"0. Instruction\", \"t\": 1, \"c\": \"1. we need to create notificanion channel\\n\\ntry tap \'notification\'\\nif there are no notification, we need to allow this channel to be shown. Settings -&gt; Apps -&gt; Notepad2 -&gt; Notifications -&gt; notepad2_notifications set on.\\n\\ntry tap again, you will see notification with name \'The notification\'\"}, {\"n\": \"1. create channel - single use\", \"t\": 2, \"c\": \"from androidx.core.app import NotificationManagerCompat\\nfrom android.app import NotificationChannel\\n\\nfunc = getattr(NotificationManagerCompat, \'from\')\\nmanager = func(api.activity)\\n\\nchannel = NotificationChannel(\'notepad2_notifications\', \'Main stream\', NotificationManagerCompat.IMPORTANCE_HIGH)\\nchannel.setDescription(\'main notepad2 notifications\')\\n\\nmanager.createNotificationChannel(channel)\"}, {\"n\": \"2. make notification\", \"t\": 2, \"c\": \"from androidx.core.app import NotificationCompat\\nfrom androidx.core.app import NotificationManagerCompat\\nfrom com.matvey.perelman.notepad2 import R\\n\\nfunc = getattr(NotificationManagerCompat, \'from\')\\nmanager = func(api.activity)\\n\\nbuilder = NotificationCompat.Builder(api.activity, \'notepad2_notifications\')\\nbuilder.setSmallIcon(R.mipmap.ic_notepad)\\nbuilder.setContentTitle(\'The notification\')\\nbuilder.setContentText(\'Notification from script\')\\nbuilder.setPriority(NotificationCompat.PRIORITY_HIGH)\\nmanager.notify(1, builder.build())\\napi.toast(\'Done\')\\n\"}, {\"n\": \"3. delete channel\", \"t\": 2, \"c\": \"from androidx.core.app import NotificationManagerCompat\\n\\nmanager = getattr(NotificationManagerCompat, \'from\')(api.activity)\\nmanager.deleteNotificationChannel(\'notepad2_notifications\')\"}]}]}]}"</string>
    <string name="error_rename_exists">Could not rename: file \'%s\' already exists</string>
    <string name="error_folder_to_script">Could not convert folder \'%s\' to text / script</string>
    <string name="error_run_nofile">Could not run \'%s\' - not file</string>

</resources>