<resources>
    <string name="app_name">Notepad 2</string>
    <string name="is_folder">Folder</string>
    <string name="is_executable">Executable</string>
    <string name="is_file">Text file</string>
    <string name="search_hint">Search</string>

    <string name="new_file_text">new file</string>
    <string name="new_folder_text">new folder</string>
    <string name="new_executable_text">new executable</string>

    <string name="new_item_not_in_set">%s isn\'t in visible data.</string>
    <string name="content">Content</string>
    <string name="info_saved">Saved</string>


    <string name="empty_folder_view">%s is empty!</string>

    <string name="param_ask_delete">Ask before delete</string>
    <string name="ask_delete">Delete %s?</string>

    <string name="action_disabled">Disabled</string>
    <string name="action_delete">Delete</string>
    <string name="action_settings">Settings</string>
    <string name="btn_menu_help">\'Help\' dir</string>

    <string name="action_save">Save</string>
    <string name="action_rollback">Rollback</string>
    <string name="action_rollforward">Rollforward</string>

    <string name="create_item_text">Create item</string>
    <string name="action_create">Create</string>
    <string name="edit_item_text">Edit item</string>
    <string name="action_apply">Apply</string>



    <string name="error_bad_path">Non existent path</string>
    <string name="error_root_file">Could not make file in root directory</string>
    <string name="error_file2folder">Could not mkdir, file with the same name exists: %s</string>
    <string name="error_folder2file">Could not write to folder: %s</string>
    <string name="error_read_existence">Could not read: file %s does not exist</string>
    <string name="error_move_dest">move dest \'%s\' is in src \'%s\'</string>
    <string name="error_move_file">move: destination is file: %s</string>

    <string name="help_text">{\"n\": \"Help\", \"t\": 0, \"f\": [{\"n\": \"1. Types\", \"t\": 1, \"c\": \"FOLDER, TEXT, EXECUTABLE - entries\\n\\n\\n\\nFOLDER - contains other entries\\n\\nTEXT - text file, you can see beginning of the text under the name of the file.\\nClick on it to edit text file.\\n\\nEXECUTABLE - the same as text file, but click on it will execute script, which is written in file.\\n\\nfiles - TEXT or EXECUTABLE.\\n\\nTo create entry click \'\\u2295\', choose type and write name for the entry.\\nOn top layer you could only create folders because of realization.\\n\\nChoose \'Settings\' in menu and click button on entrie. You can rename it and change type between EXECUTABLE and TEXT.\\n\\nChoose \'Delete\' in menu and click button on entrie.\\nIf \'ask before delete\' is selected, app will ask you to accept. If not selected - the entrie will be deleted immediately.\"}, {\"n\": \"2. Executable\", \"t\": 1, \"c\": \"Executable - python 3 script.\\nWrite some code on python 3 in text, then change type of the text to Executable and tap it.\\n\\n\\nOutput.\\nOutput of the script is going to \'out.txt\' in the same folder, result of error stream is going to \'err.txt\'.\\n\\n\\nLibraries.\\nNow python has no external libraries, just standart python 3 library.\\n\'sys\' and \'json\' are already imported.\\n\\n\\nAPI.\\nNotepad api is imported as \'api\', it has the following methods:\\n\\ntoast(str) - displays toast with text \'str\'\\ntoast_l(str) - long duration toast\\n\\ntouch(path) - if file does not exist, makes new text\\n\\nread(path):str - read text from file, throws runtime error if there are no file.\\n\\nwrite(path, str) - write text to file, makes new text if need, throws runtime error if path is a path of folder.\\n\\nexecutable(path, bool) - marks text as executable or executable as text, makes new file if need, throws runtime error if path is a path of folder.\\n\\nmkdir(path) - makes new folder, throws runtime error if path is a path of file.\\n\\ndelete(path) - deletes entry and if entry is folder, deletes all chindren.\\n\\nget_path():str - returns absolute path of folder, where this executable is.\\n\\nget_name(path):str - returns name of last entry of the path.\\n\\npath_concat(str, str):str - returns right concatenation of two paths.\\n\\nexists(path):bool - returns True if path exists else False.\\n\\nis_folder(path):bool - returns True if path is path of folder, else False.\\n\\nis_executable(path):bool - returns True, if path is path of executable, else False.\\n\\nget_type(path):ElementType - returns exapmple of the enum, can be None, ElementType.TEXT, ElementType.FOLDER, ElementType.EXECUTABLE.\\n\\nlist_files(path):java.util.ArrayList - returns list of files of the folder, list.size() to get length, list.get(i) to get i element. Elements are of type DatabaseElement, which have following fields:\\nid:int - unique id in one database, id spaces: root folder, each folder in root folder.\\nname:str, type:ElementType, content:str.\\nthe element has method toString():str.\\n\\nmove(path1, path2) - moves entry called path1, to folder called path2, if moving in one database, works fast.\\n\\n\\nAPI_FILES.\\nextra functions, realized on python, already imported class \'api_files\' has following methods:\\n\\nto_py(path):dict - returns dict of following values:\\n\'n\' - name of entry\\n\'t\' - type\\nif type is folder:\\n    \'f\' - list of dicts - entries\\nelse:\\n    \'c\' - content of file\\n\\nfrom_py(path, dict) - from dict makes new entry in folder called path.\\n\\nto_json(path):str - makes string from to_py(path)\\nfrom_json(path, str) - invokes from_py(path, dict)\\n\\n\\nPATH.\\nabsolute path starts on root folder, starts with \'/\' - like in title of window.\\nrelative path.\\n\\n\\nOTHER.\\nYou can import every class from android standard library, if you need example of Context, it is available as \'api.activity\' of type AppCompatActivity.\"}, {\"n\": \"3. Code examples\", \"t\": 0, \"f\": [{\"n\": \"1. Hello world\", \"t\": 0, \"f\": [{\"n\": \"1. print\", \"t\": 2, \"c\": \"print(\'Hello world\')\"}, {\"n\": \"2. toast\", \"t\": 2, \"c\": \"api.toast(\'Hello world\')\"}]}, {\"n\": \"2. Read-write\", \"t\": 0, \"f\": [{\"n\": \"1. Write\", \"t\": 2, \"c\": \"api.write(\'data/text\', \'Hello world\')\"}, {\"n\": \"2. Read\", \"t\": 2, \"c\": \"api.toast(api.read(\'data/text\'))\"}, {\"n\": \"3. Delete\", \"t\": 2, \"c\": \"api.delete(\'data\')\"}]}, {\"n\": \"3. Incrementor\", \"t\": 0, \"f\": [{\"n\": \".num\", \"t\": 1, \"c\": \"0\"}, {\"n\": \"appender\", \"t\": 2, \"c\": \"#append one to file num\\n\\nfile = \'.num\'\\n\\ni = 1\\nif api.exists(file):\\n    s = api.read(file)\\n    i = int(s) + 1\\n\\napi.write(file, str(i))\"}, {\"n\": \"subtractor\", \"t\": 2, \"c\": \"#subtract one from file num\\n\\nfile = \'.num\'\\n\\ni = -1\\nif api.exists(file):\\n    s = api.read(file)\\n    i = int(s) - 1\\n\\napi.write(file, str(i))\"}]}, {\"n\": \"4. Move\", \"t\": 0, \"f\": [{\"n\": \"1. Make data\", \"t\": 2, \"c\": \"api.mkdir(\'main\')\\napi.mkdir(\'fold\')\\napi.touch(\'file\')\"}, {\"n\": \"2. Clear data\", \"t\": 2, \"c\": \"api.delete(\'main\')\\napi.delete(\'fold\')\\napi.delete(\'file\')\"}, {\"n\": \"3. Move file\", \"t\": 2, \"c\": \"api.move(\'file\', \'fold\')\"}, {\"n\": \"4. Move fold\", \"t\": 2, \"c\": \"api.move(\'fold\', \'main\')\"}, {\"n\": \"5. Move back\", \"t\": 2, \"c\": \"api.move(\'main/fold/file\', \'.\')\\napi.move(\'main/fold\', \'.\')\"}]}]}, {\"n\": \"TODO\", \"t\": 1, \"c\": \"Change all dirs to folders\"}]}</string>
    <string name="error_rename_exists">rename: file already exists</string>

</resources>